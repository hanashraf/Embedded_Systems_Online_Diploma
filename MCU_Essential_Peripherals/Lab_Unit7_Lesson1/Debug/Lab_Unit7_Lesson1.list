
Lab_Unit7_Lesson1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000248  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000378  08000380  00010380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000378  08000378  00010380  2**0
                  CONTENTS
  4 .ARM          00000000  08000378  08000378  00010380  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000378  08000380  00010380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000378  08000378  00010378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800037c  0800037c  0001037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000380  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000380  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010380  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000011f  00000000  00000000  000103a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000b8  00000000  00000000  000104c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00010580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  000105e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f6a  00000000  00000000  00010628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000049a  00000000  00000000  00011592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003cbb  00000000  00000000  00011a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000156e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c0  00000000  00000000  00015738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000360 	.word	0x08000360

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000360 	.word	0x08000360

08000170 <clock_init>:
#define RCC_APB2ENP 	*(volatile uint32_t *)(RCC_BASE+0x18)      //APB2 peripheral clock enable register

/************************************************************************************************************/

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_APB2ENP |= (1<<2);
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
	Bit 2 IOPAEN: IO port A clock enable
	Set and cleared by software.
	0: IO port A clock disabled
	1: IO port A clock enabled
	 */
	RCC_APB2ENP |= (1<<3);
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6013      	str	r3, [r2, #0]
	Bit 3 IOPAEN: IO port B clock enable
	Set and cleared by software.
	0: IO port A clock disabled
	1: IO port A clock enabled
	 */
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021018 	.word	0x40021018

08000198 <GPIO_init>:

void GPIO_init()
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	GPIOA_CRL = 0;
 800019c:	4b1f      	ldr	r3, [pc, #124]	; (800021c <GPIO_init+0x84>)
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
	GPIOA_CRH = 0;
 80001a2:	4b1f      	ldr	r3, [pc, #124]	; (8000220 <GPIO_init+0x88>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
	GPIOB_CRL = 0;
 80001a8:	4b1e      	ldr	r3, [pc, #120]	; (8000224 <GPIO_init+0x8c>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
	GPIOB_CRH = 0;
 80001ae:	4b1e      	ldr	r3, [pc, #120]	; (8000228 <GPIO_init+0x90>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
	//PortA1  (Input high impedence)
	GPIOA_CRL &= 0xFFFFFF0F;
 80001b4:	4b19      	ldr	r3, [pc, #100]	; (800021c <GPIO_init+0x84>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a18      	ldr	r2, [pc, #96]	; (800021c <GPIO_init+0x84>)
 80001ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80001be:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= 0x00000040;
 80001c0:	4b16      	ldr	r3, [pc, #88]	; (800021c <GPIO_init+0x84>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a15      	ldr	r2, [pc, #84]	; (800021c <GPIO_init+0x84>)
 80001c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001ca:	6013      	str	r3, [r2, #0]
	//PortA13 (Input high impedence)
	GPIOA_CRH &= 0xFF0FFFFF;
 80001cc:	4b14      	ldr	r3, [pc, #80]	; (8000220 <GPIO_init+0x88>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a13      	ldr	r2, [pc, #76]	; (8000220 <GPIO_init+0x88>)
 80001d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001d6:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x00400000;
 80001d8:	4b11      	ldr	r3, [pc, #68]	; (8000220 <GPIO_init+0x88>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a10      	ldr	r2, [pc, #64]	; (8000220 <GPIO_init+0x88>)
 80001de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001e2:	6013      	str	r3, [r2, #0]
	//PortB1  (Output push-pull)
	GPIOB_CRL &= 0xFFFFFF0F;
 80001e4:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <GPIO_init+0x8c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a0e      	ldr	r2, [pc, #56]	; (8000224 <GPIO_init+0x8c>)
 80001ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOB_CRL |= 0x00000010;
 80001f0:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <GPIO_init+0x8c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0b      	ldr	r2, [pc, #44]	; (8000224 <GPIO_init+0x8c>)
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6013      	str	r3, [r2, #0]
	//PortB13 (Output push-pull)
	GPIOB_CRH &= 0xFF0FFFFF;
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <GPIO_init+0x90>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a09      	ldr	r2, [pc, #36]	; (8000228 <GPIO_init+0x90>)
 8000202:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000206:	6013      	str	r3, [r2, #0]
	GPIOB_CRH |= 0x00100000;
 8000208:	4b07      	ldr	r3, [pc, #28]	; (8000228 <GPIO_init+0x90>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a06      	ldr	r2, [pc, #24]	; (8000228 <GPIO_init+0x90>)
 800020e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000212:	6013      	str	r3, [r2, #0]
}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	40010800 	.word	0x40010800
 8000220:	40010804 	.word	0x40010804
 8000224:	40010c00 	.word	0x40010c00
 8000228:	40010c04 	.word	0x40010c04

0800022c <wait>:
void wait(void)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
	int y = 1000;
 8000232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000236:	607b      	str	r3, [r7, #4]
	for (int x=1; x<y ; x++)
 8000238:	2301      	movs	r3, #1
 800023a:	603b      	str	r3, [r7, #0]
 800023c:	e005      	b.n	800024a <wait+0x1e>
		y--;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	3b01      	subs	r3, #1
 8000242:	607b      	str	r3, [r7, #4]
	for (int x=1; x<y ; x++)
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	3301      	adds	r3, #1
 8000248:	603b      	str	r3, [r7, #0]
 800024a:	683a      	ldr	r2, [r7, #0]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	429a      	cmp	r2, r3
 8000250:	dbf5      	blt.n	800023e <wait+0x12>
}
 8000252:	bf00      	nop
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
	...

08000260 <main>:
int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	clock_init();
 8000264:	f7ff ff84 	bl	8000170 <clock_init>
	GPIO_init();
 8000268:	f7ff ff96 	bl	8000198 <GPIO_init>
	while(1)
	{
		//simple press pull up
		if((GPIOA_IDR &= 0x00000002)==0)
 800026c:	4b13      	ldr	r3, [pc, #76]	; (80002bc <main+0x5c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a12      	ldr	r2, [pc, #72]	; (80002bc <main+0x5c>)
 8000272:	f003 0302 	and.w	r3, r3, #2
 8000276:	6013      	str	r3, [r2, #0]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10e      	bne.n	800029a <main+0x3a>
		{
			GPIOB_ODR ^= (1<<1);
 800027c:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <main+0x60>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a0f      	ldr	r2, [pc, #60]	; (80002c0 <main+0x60>)
 8000282:	f083 0302 	eor.w	r3, r3, #2
 8000286:	6013      	str	r3, [r2, #0]
			while((GPIOA_IDR &= 0x00000002)==0);
 8000288:	bf00      	nop
 800028a:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <main+0x5c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a0b      	ldr	r2, [pc, #44]	; (80002bc <main+0x5c>)
 8000290:	f003 0302 	and.w	r3, r3, #2
 8000294:	6013      	str	r3, [r2, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d0f7      	beq.n	800028a <main+0x2a>
		}
		//Multi-press pull down
		if((GPIOA_IDR &= 0x00002000)==1)
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <main+0x5c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a07      	ldr	r2, [pc, #28]	; (80002bc <main+0x5c>)
 80002a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002a4:	6013      	str	r3, [r2, #0]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d105      	bne.n	80002b6 <main+0x56>
		{
			GPIOB_ODR ^= (1<<13);
 80002aa:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <main+0x60>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a04      	ldr	r2, [pc, #16]	; (80002c0 <main+0x60>)
 80002b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80002b4:	6013      	str	r3, [r2, #0]
		}
		wait();
 80002b6:	f7ff ffb9 	bl	800022c <wait>
		if((GPIOA_IDR &= 0x00000002)==0)
 80002ba:	e7d7      	b.n	800026c <main+0xc>
 80002bc:	40010808 	.word	0x40010808
 80002c0:	40010c0c 	.word	0x40010c0c

080002c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002cc:	480c      	ldr	r0, [pc, #48]	; (8000300 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ce:	490d      	ldr	r1, [pc, #52]	; (8000304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d0:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <LoopForever+0xe>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d4:	e002      	b.n	80002dc <LoopCopyDataInit>

080002d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002da:	3304      	adds	r3, #4

080002dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e0:	d3f9      	bcc.n	80002d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e2:	4a0a      	ldr	r2, [pc, #40]	; (800030c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e4:	4c0a      	ldr	r4, [pc, #40]	; (8000310 <LoopForever+0x16>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e8:	e001      	b.n	80002ee <LoopFillZerobss>

080002ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ec:	3204      	adds	r2, #4

080002ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f0:	d3fb      	bcc.n	80002ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f2:	f000 f811 	bl	8000318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f6:	f7ff ffb3 	bl	8000260 <main>

080002fa <LoopForever>:

LoopForever:
    b LoopForever
 80002fa:	e7fe      	b.n	80002fa <LoopForever>
  ldr   r0, =_estack
 80002fc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000304:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000308:	08000380 	.word	0x08000380
  ldr r2, =_sbss
 800030c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000310:	2000001c 	.word	0x2000001c

08000314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000314:	e7fe      	b.n	8000314 <ADC1_2_IRQHandler>
	...

08000318 <__libc_init_array>:
 8000318:	b570      	push	{r4, r5, r6, lr}
 800031a:	2600      	movs	r6, #0
 800031c:	4d0c      	ldr	r5, [pc, #48]	; (8000350 <__libc_init_array+0x38>)
 800031e:	4c0d      	ldr	r4, [pc, #52]	; (8000354 <__libc_init_array+0x3c>)
 8000320:	1b64      	subs	r4, r4, r5
 8000322:	10a4      	asrs	r4, r4, #2
 8000324:	42a6      	cmp	r6, r4
 8000326:	d109      	bne.n	800033c <__libc_init_array+0x24>
 8000328:	f000 f81a 	bl	8000360 <_init>
 800032c:	2600      	movs	r6, #0
 800032e:	4d0a      	ldr	r5, [pc, #40]	; (8000358 <__libc_init_array+0x40>)
 8000330:	4c0a      	ldr	r4, [pc, #40]	; (800035c <__libc_init_array+0x44>)
 8000332:	1b64      	subs	r4, r4, r5
 8000334:	10a4      	asrs	r4, r4, #2
 8000336:	42a6      	cmp	r6, r4
 8000338:	d105      	bne.n	8000346 <__libc_init_array+0x2e>
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000340:	4798      	blx	r3
 8000342:	3601      	adds	r6, #1
 8000344:	e7ee      	b.n	8000324 <__libc_init_array+0xc>
 8000346:	f855 3b04 	ldr.w	r3, [r5], #4
 800034a:	4798      	blx	r3
 800034c:	3601      	adds	r6, #1
 800034e:	e7f2      	b.n	8000336 <__libc_init_array+0x1e>
 8000350:	08000378 	.word	0x08000378
 8000354:	08000378 	.word	0x08000378
 8000358:	08000378 	.word	0x08000378
 800035c:	0800037c 	.word	0x0800037c

08000360 <_init>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr

0800036c <_fini>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr
